<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuickGraph</name>
    </assembly>
    <members>
        <member name="T:QuickGraph.IGraph`2">
            <summary>
            A graph with vertices of type <typeparamref name="TVertex"/>
            and edges of type <typeparamref name="TEdge"/>
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="P:QuickGraph.IGraph`2.IsDirected">
            <summary>
            Gets a value indicating if the graph is directed
            </summary>
        </member>
        <member name="P:QuickGraph.IGraph`2.AllowParallelEdges">
            <summary>
            Gets a value indicating if the graph allows parallel edges
            </summary>
        </member>
        <member name="P:QuickGraph.Predicates.FilteredGraph`3.BaseGraph">
            <summary>
            Underlying filtered graph
            </summary>
        </member>
        <member name="P:QuickGraph.Predicates.FilteredGraph`3.EdgePredicate">
            <summary>
            Edge predicate used to filter the edges
            </summary>
        </member>
        <member name="T:QuickGraph.Petri.IPetriNet`1">
            <summary>
            A High Level Petri Graph.
            </summary>
            <remarks>
            <para>
            This object is called a Petri Net in honour of Petri's work. In fact,
            it should be named High Level Petri Graph.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Petri.IPetriNet`1.Places">
            <summary>
            Gets a collection of <see cref="T:QuickGraph.Petri.IPlace`1"/> instances.
            </summary>
            <value>
            A collection of <see cref="T:QuickGraph.Petri.IPlace`1"/> instances.
            </value>
        </member>
        <member name="P:QuickGraph.Petri.IPetriNet`1.Transitions">
            <summary>
            Gets a collection of <see cref="T:QuickGraph.Petri.ITransition`1"/> instances.
            </summary>
            <value>
            A collection of <see cref="T:QuickGraph.Petri.ITransition`1"/> instances.
            </value>
        </member>
        <member name="P:QuickGraph.Petri.IPetriNet`1.Arcs">
            <summary>
            Gets a collection of <see cref="T:QuickGraph.Petri.IArc`1"/> instances.
            </summary>
            <value>
            A collection of <see cref="T:QuickGraph.Petri.IArc`1"/> instances.
            </value>
        </member>
        <member name="T:QuickGraph.EdgeEventArgs`2">
            <summary>
            An event involving an edge.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
        </member>
        <member name="M:QuickGraph.EdgeEventArgs`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.EdgeEventArgs`2"/> class.
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="P:QuickGraph.EdgeEventArgs`2.Edge">
            <summary>
            Gets the edge.
            </summary>
            <value>The edge.</value>
        </member>
        <member name="T:QuickGraph.EdgeAction`2">
            <summary>
            The handler for events involving edges
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="e"></param>
        </member>
        <member name="T:QuickGraph.IMutableEdgeListGraph`2">
            <summary>
            A mutable edge list graph.
            </summary>
            <typeparam name="TVertex">the vertex type</typeparam>
            <typeparam name="TEdge">the edge type</typeparam>
        </member>
        <member name="T:QuickGraph.IMutableGraph`2">
            <summary>
            A mutable graph instance
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.IEdgeSet`2">
            <summary>
            A set of edges
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
        </member>
        <member name="M:QuickGraph.IEdgeSet`2.ContainsEdge(`1)">
            <summary>
            Determines whether the specified edge contains edge.
            </summary>
            <param name="edge">The edge.</param>
            <returns>
            	<c>true</c> if the specified edge contains edge; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:QuickGraph.IEdgeSet`2.IsEdgesEmpty">
            <summary>
            Gets a value indicating whether there are no edges in this set.
            </summary>
            <value>
            	<c>true</c> if this set is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:QuickGraph.IEdgeSet`2.EdgeCount">
            <summary>
            Gets the edge count.
            </summary>
            <value>The edge count.</value>
        </member>
        <member name="P:QuickGraph.IEdgeSet`2.Edges">
            <summary>
            Gets the edges.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="T:QuickGraph.IVertexSet`1">
            <summary>
            A set of vertices
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="T:QuickGraph.IImplicitVertexSet`1">
            <summary>
            An implicit set of vertices
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="M:QuickGraph.IImplicitVertexSet`1.ContainsVertex(`0)">
            <summary>
            Determines whether the specified vertex contains vertex.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>
            	<c>true</c> if the specified vertex contains vertex; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:QuickGraph.IVertexSet`1.IsVerticesEmpty">
            <summary>
            Gets a value indicating whether there are no vertices in this set.
            </summary>
            <value>
            	<c>true</c> if the vertex set is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:QuickGraph.IVertexSet`1.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
            <value>The vertex count.</value>
        </member>
        <member name="P:QuickGraph.IVertexSet`1.Vertices">
            <summary>
            Gets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="M:QuickGraph.IMutableEdgeListGraph`2.AddEdge(`1)">
            <summary>
            Adds the edge to the graph
            </summary>
            <param name="edge"></param>
            <returns>true if the edge was added, otherwise false.</returns>
        </member>
        <member name="M:QuickGraph.IMutableEdgeListGraph`2.AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a set of edges to the graph.
            </summary>
            <param name="edges"></param>
            <returns>the number of edges successfully added to the graph.</returns>
        </member>
        <member name="M:QuickGraph.IMutableEdgeListGraph`2.RemoveEdge(`1)">
            <summary>
            Removes <paramref name="edge"/> from the graph
            </summary>
            <param name="edge"></param>
            <returns>true if <paramref name="edge"/> was successfully removed; otherwise false.</returns>
        </member>
        <member name="M:QuickGraph.IMutableEdgeListGraph`2.RemoveEdgeIf(QuickGraph.EdgePredicate{`0,`1})">
            <summary>
            Removes all edges that match <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A pure delegate that takes an <typeparamref name="TEdge"/> and returns true if the edge should be removed.</param>
            <returns>the number of edges removed.</returns>
        </member>
        <member name="E:QuickGraph.IMutableEdgeListGraph`2.EdgeAdded">
            <summary>
            Raised when an edge is added to the graph.
            </summary>
        </member>
        <member name="E:QuickGraph.IMutableEdgeListGraph`2.EdgeRemoved">
            <summary>
            Raised when an edge has been removed from the graph.
            </summary>
        </member>
        <member name="M:QuickGraph.IMutableVertexAndEdgeSet`2.AddVerticesAndEdge(`1)">
            <summary>
            Adds the vertices and edge to the graph.
            </summary>
            <param name="edge"></param>
            <returns>true if the edge was added, otherwise false.</returns>
        </member>
        <member name="M:QuickGraph.IMutableVertexAndEdgeSet`2.AddVerticesAndEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a set of edges (and it's vertices if necessary)
            </summary>
            <param name="edges"></param>
            <returns>the number of edges added.</returns>
        </member>
        <member name="T:QuickGraph.IImplicitGraph`2">
            <summary>
            A implicit directed graph datastructure
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
        </member>
        <member name="M:QuickGraph.IImplicitGraph`2.IsOutEdgesEmpty(`0)">
            <summary>
            Determines whether there are out-edges associated to <paramref name="v"/>.
            </summary>
            <param name="v">The vertex.</param>
            <returns>
            	<c>true</c> if <paramref name="v"/> has no out-edges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QuickGraph.IImplicitGraph`2.OutDegree(`0)">
            <summary>
            Gets the count of out-edges of <paramref name="v"/>
            </summary>
            <param name="v">The vertex.</param>
            <returns>The count of out-edges of <paramref name="v"/></returns>
        </member>
        <member name="M:QuickGraph.IImplicitGraph`2.OutEdges(`0)">
            <summary>
            Gets the out-edges of <paramref name="v"/>.
            </summary>
            <param name="v">The vertex.</param>
            <returns>An enumeration of the out-edges of <paramref name="v"/>.</returns>
        </member>
        <member name="M:QuickGraph.IImplicitGraph`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the out-edges of <paramref name="v"/>
            </summary>
            <param name="v"></param>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.IImplicitGraph`2.OutEdge(`0,System.Int32)">
            <summary>
            Gets the out-edge of <paramref name="v"/> at position <paramref name="index"/>.
            </summary>
            <param name="v">The vertex.</param>
            <param name="index">The index.</param>
            <returns>The out-edge at position <paramref name="index"/></returns>
        </member>
        <member name="T:QuickGraph.SEquatableUndirectedEdge`1">
            <summary>
            An struct based <see cref="T:QuickGraph.IEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
        </member>
        <member name="T:QuickGraph.IUndirectedEdge`1">
            <summary>
            An undirected edge. Invariant: source must be less or equal to target (using the default comparer)
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="T:QuickGraph.IEdge`1">
            <summary>
            A directed edge
            </summary>
            <typeparam name="TVertex">The vertex type</typeparam>
        </member>
        <member name="P:QuickGraph.IEdge`1.Source">
            <summary>
            Gets the source vertex
            </summary>
        </member>
        <member name="P:QuickGraph.IEdge`1.Target">
            <summary>
            Gets the target vertex
            </summary>
        </member>
        <member name="M:QuickGraph.SEquatableUndirectedEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.SEdge`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:QuickGraph.SEquatableUndirectedEdge`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:QuickGraph.SEquatableUndirectedEdge`1.Equals(QuickGraph.SEquatableUndirectedEdge{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.SEquatableUndirectedEdge`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.SEquatableUndirectedEdge`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:QuickGraph.SEquatableUndirectedEdge`1.Source">
            <summary>
            Gets the source vertex
            </summary>
            <value></value>
        </member>
        <member name="P:QuickGraph.SEquatableUndirectedEdge`1.Target">
            <summary>
            Gets the target vertex
            </summary>
            <value></value>
        </member>
        <member name="T:QuickGraph.DelegateImplicitUndirectedGraph`2">
            <summary>
            A functional implicit undirected graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.Algorithms.Services.IService">
            <summary>
            Interface implemented by graph services
            </summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.EdgeDepthFirstSearchAlgorithm`2">
            <summary>
            A edge depth first search algorithm for directed graphs
            </summary>
            <remarks>
            This is a variant of the classic DFS algorithm where the
            edges are color marked instead of the vertices.
            </remarks>
            <reference-ref
                idref="gross98graphtheory"
                chapter="4.2"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmBase`1.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,`0)">
            <summary>
            Creates a new algorithm with an (optional) host.
            </summary>
            <param name="host">if null, host is set to the this reference</param>
            <param name="visitedGraph"></param>
        </member>
        <member name="T:QuickGraph.SReversedEdge`2">
            <summary>
            A reversed edge
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.IVertexListGraph`2">
            <summary>
            A directed graph datastructure where out-edges can be traversed,
            i.e. a vertex set + implicit graph.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
        </member>
        <member name="T:System.Diagnostics.Contracts.Contract">
            <summary>
            Methods to express preconditions, postconditions and invariants.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
            <summary>
            In debug builds, perform a runtime test that a condition is true. 
            (shortcut: cca)
            </summary>
            <param name="condition">the asserted condition</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
            <summary>
            In debug builds, perform a runtime test that a condition is true. 
            </summary>
            <param name="condition">the asserted condition</param>
            <param name="message">custom message</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
            <summary>
             In debug builds, instructs code analysis tools to assume a condition is true even if it can not be statically proven to always be true. 
             (shortcut: ccam)
            </summary>
            <param name="condition">the assumed condition</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
            <summary>
             In debug builds with contracts, instructs code analysis tools to assume a condition is true even if it can not be statically proven to always be true. 
            </summary>
            <param name="condition">the assumed condition</param>
            <param name="message">custom message</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
            <summary>
            Identifies the end of a contract block. Place this method call after legacy parameter validations.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
            <summary>
            Specifies a public contract such that the conditional expression is true when the enclosing method or property returns normally.
            (shortcut: ce)
            </summary>
            <param name="condition">The conditional expression to test for true. The expression may include OldValue(T) and Result(T).</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
            <summary>
            Specifies a public contract such that the conditional expression is true when the enclosing method or property returns normally.
            </summary>
            <param name="condition">The conditional expression to test for true. The expression may include OldValue(T) and Result(T).</param>
            <param name="message">custom logging message</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
            <summary>
            Specifies a contract such that if an exception of type TException is thrown then the conditional expression should be true 
            when the enclosing method or property terminates abnormally.
            </summary>
            <param name="condition">The conditional expression to test for true. The expression may include OldValue(T) and Result(T).</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that if an exception of type TException is thrown then the conditional expression should be true 
            when the enclosing method or property terminates abnormally.
            </summary>
            <param name="condition">The conditional expression to test for true. The expression may include OldValue(T) and Result(T).</param>
            <param name="message">custom message</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns true if predicate returns true for any element in collection
            </summary>
            <typeparam name="T">the element type of the collection</typeparam>
            <param name="collection">the collection</param>
            <param name="predicate">the predicate</param>
            <returns>true if any element evaluates predicate to true</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Returns true if predicate returns true for any integer starting from inclusiveLowerBound to exclusiveUpperBound - 1.
            </summary>
            <param name="inclusiveLowerBound">the inclusive lower bound</param>
            <param name="exclusiveUpperBound">the exclusive upper bound</param>
            <param name="predicate">a method that evaluates an index to a boolean value</param>
            <returns>true if predicate returns true for any integer starting from inclusiveLowerBound to exclusiveUpperBound - 1.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
            <summary>
            Specifies a contract such that a condition must be true before the enclosing method or property is invoked. 
            (shortcut: cr, crn, crsn)
            </summary>
            <param name="condition">The conditional expression to test for true.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that a condition must be true before the enclosing method or property is invoked. 
            </summary>
            <param name="condition">The conditional expression to test for true.</param>
            <param name="message">custom error message</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
            <summary>
            Specifies a contract such that a condition must be true when a particular exception type is raised.
            (shortcuts: cre, cren, cresn)
            </summary>
            <param name="condition">The conditional expression to test for true.</param>
        </member>
        <member name="T:QuickGraph.Algorithms.Contracts.DummyAlgorithmContract">
            <summary>
            Ensures that System.Diagnostics.Contracts namespace exists 
            </summary>
        </member>
        <member name="T:QuickGraph.SUndirectedTaggedEdge`2">
            <summary>
            An struct based <see cref="T:QuickGraph.IUndirectedEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">type of the vertex.</typeparam>
            <typeparam name="TTag">type of the tag</typeparam>
        </member>
        <member name="T:QuickGraph.ITagged`1">
            <summary>
            An instance holding a tag
            </summary>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="P:QuickGraph.ITagged`1.Tag">
            <summary>
            Gets or sets the tag
            </summary>
        </member>
        <member name="E:QuickGraph.ITagged`1.TagChanged">
            <summary>
            Raised when the tag is changed
            </summary>
        </member>
        <member name="M:QuickGraph.SUndirectedTaggedEdge`2.#ctor(`0,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.SUndirectedTaggedEdge`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:QuickGraph.SUndirectedTaggedEdge`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:QuickGraph.SUndirectedTaggedEdge`2.Source">
            <summary>
            Gets the source vertex
            </summary>
            <value></value>
        </member>
        <member name="P:QuickGraph.SUndirectedTaggedEdge`2.Target">
            <summary>
            Gets the target vertex
            </summary>
            <value></value>
        </member>
        <member name="T:QuickGraph.Collections.IDisjointSet`1">
            <summary>
            A disjoint-set data structure
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QuickGraph.Collections.IDisjointSet`1.MakeSet(`0)">
            <summary>
            Creates a new set for the value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:QuickGraph.Collections.IDisjointSet`1.FindSet(`0)">
            <summary>
            Finds the set containing the value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.IDisjointSet`1.AreInSameSet(`0,`0)">
            <summary>
            Gets a value indicating if left and right are contained in the same set
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.IDisjointSet`1.Union(`0,`0)">
            <summary>
            Merges the sets from the two values
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>true if left and right were unioned, false if they already belong to the same set</returns>
        </member>
        <member name="M:QuickGraph.Collections.IDisjointSet`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the value is in the data structure
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.IDisjointSet`1.SetCount">
            <summary>
            Gets the current number of sets
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.IDisjointSet`1.ElementCount">
            <summary>
            Gets the current number of elements.
            </summary>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.UndirectedDijkstraShortestPathAlgorithm`2">
            <summary>
            A single-source shortest path algorithm for undirected graph
            with positive distance.
            </summary>
            <reference-ref
                idref="lawler01combinatorial"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.OnTreeEdge(`1,System.Boolean)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.TreeEdge"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
            <param name="reversed"></param>
        </member>
        <member name="E:QuickGraph.Algorithms.ShortestPath.UndirectedShortestPathAlgorithmBase`2.TreeEdge">
            <summary>
            Invoked when the distance label for the target vertex is decreased. 
            The edge that participated in the last relaxation for vertex v is 
            an edge in the shortest paths tree.
            </summary>
        </member>
        <member name="T:QuickGraph.Algorithms.IDistanceRecorderAlgorithm`2">
            <summary>
            An algorithm that exposes events to compute a distance map between vertices
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.AStarShortestPathAlgorithm`2">
            <summary>
            A* single-source shortest path algorithm for directed graph
            with positive distance.
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="lawler01combinatorial"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.OnTreeEdge(`1)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.TreeEdge"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
        </member>
        <member name="E:QuickGraph.Algorithms.ShortestPath.ShortestPathAlgorithmBase`3.TreeEdge">
            <summary>
            Invoked when the distance label for the target vertex is decreased. 
            The edge that participated in the last relaxation for vertex v is 
            an edge in the shortest paths tree.
            </summary>
        </member>
        <member name="T:QuickGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2">
            <summary>
            Wilson-Propp Cycle-Popping Algorithm for Random Tree Generation.
            </summary>
        </member>
        <member name="P:QuickGraph.Algorithms.RandomWalks.CyclePoppingRandomTreeAlgorithm`2.Rnd">
            <summary>
            Gets or sets the random number generator used in <c>RandomTree</c>.
            </summary>
            <value>
            <see cref="T:System.Random"/> number generator
            </value>
        </member>
        <member name="M:QuickGraph.Serialization.SerializationExtensions.SerializeToBinary``2(QuickGraph.IGraph{``0,``1},System.IO.Stream)">
            <summary>
            Serializes the graph to the stream using the .Net serialization binary format.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="stream"></param>
        </member>
        <member name="M:QuickGraph.Serialization.SerializationExtensions.DeserializeFromBinary``3(System.IO.Stream)">
            <summary>
            Deserializes a graph instance from a stream that was serialized using the .Net serialization binary format.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TGraph"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.SerializationExtensions.DeserializeFromXml``3(System.Xml.XPath.IXPathNavigable,System.String,System.String,System.String,System.Func{System.Xml.XPath.XPathNavigator,``2},System.Func{System.Xml.XPath.XPathNavigator,``0},System.Func{System.Xml.XPath.XPathNavigator,``1})">
            <summary>
            Deserializes a graph from a generic xml stream, using an <see cref="T:System.Xml.XPath.XPathDocument"/>.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TGraph"></typeparam>
            <param name="doc">input xml document</param>
            <param name="graphXPath">xpath expression to the graph node. The first node is considered</param>
            <param name="verticesXPath">xpath expression from the graph node to the vertex nodes.</param>
            <param name="edgesXPath">xpath expression from the graph node to the edge nodes.</param>
            <param name="graphFactory">delegate that instantiate the empty graph instance, given the graph node</param>
            <param name="vertexFactory">delegate that instantiate a vertex instance, given the vertex node</param>
            <param name="edgeFactory">delegate that instantiate an edge instance, given the edge node</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.SerializationExtensions.DeserializeFromXml``3(System.Xml.XmlReader,System.Predicate{System.Xml.XmlReader},System.Predicate{System.Xml.XmlReader},System.Predicate{System.Xml.XmlReader},System.Func{System.Xml.XmlReader,``2},System.Func{System.Xml.XmlReader,``0},System.Func{System.Xml.XmlReader,``1})">
            <summary>
            Deserializes a graph from a generic xml stream, using an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TGraph"></typeparam>
            <param name="reader">input xml document</param>
            <param name="graphPredicate">predicate that returns a value indicating if the current xml node is a graph. The first match is considered</param>
            <param name="vertexPredicate">predicate that returns a value indicating if the current xml node is a vertex.</param>
            <param name="edgePredicate">predicate that returns a value indicating if the current xml node is an edge.</param>
            <param name="graphFactory">delegate that instantiate the empty graph instance, given the graph node</param>
            <param name="vertexFactory">delegate that instantiate a vertex instance, given the vertex node</param>
            <param name="edgeFactory">delegate that instantiate an edge instance, given the edge node</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.SerializationExtensions.DeserializeFromXml``3(System.Xml.XmlReader,System.String,System.String,System.String,System.String,System.Func{System.Xml.XmlReader,``2},System.Func{System.Xml.XmlReader,``0},System.Func{System.Xml.XmlReader,``1})">
            <summary>
            Deserializes a graph from a generic xml stream, using an <see cref="T:System.Xml.XPath.XPathDocument"/>.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TGraph"></typeparam>
            <param name="reader">input xml document</param>
            <param name="namespaceUri">xml namespace</param>
            <param name="graphElementName">name of the xml node holding graph information. The first node is considered</param>
            <param name="vertexElementName">name of the xml node holding vertex information</param>
            <param name="edgeElementName">name of the xml node holding edge information</param>
            <param name="graphFactory">delegate that instantiate the empty graph instance, given the graph node</param>
            <param name="vertexFactory">delegate that instantiate a vertex instance, given the vertex node</param>
            <param name="edgeFactory">delegate that instantiate an edge instance, given the edge node</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.SerializationExtensions.SerializeToXml``3(``2,System.Xml.XmlWriter,QuickGraph.VertexIdentity{``0},QuickGraph.EdgeIdentity{``0,``1},System.String,System.String,System.String,System.String)">
            <summary>
            Serializes a graph to a generic xml stream, using an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <typeparam name="TGraph">The type of the graph.</typeparam>
            <param name="graph">The graph.</param>
            <param name="writer">The writer.</param>
            <param name="vertexIdentity">The vertex identity.</param>
            <param name="edgeIdentity">The edge identity.</param>
            <param name="graphElementName">Name of the graph element.</param>
            <param name="vertexElementName">Name of the vertex element.</param>
            <param name="edgeElementName">Name of the edge element.</param>
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:QuickGraph.Serialization.SerializationExtensions.SerializeToXml``3(``2,System.Xml.XmlWriter,QuickGraph.VertexIdentity{``0},QuickGraph.EdgeIdentity{``0,``1},System.String,System.String,System.String,System.String,System.Action{System.Xml.XmlWriter,``2},System.Action{System.Xml.XmlWriter,``0},System.Action{System.Xml.XmlWriter,``1})">
            <summary>
            Serializes a graph to a generic xml stream, using an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <typeparam name="TGraph">The type of the graph.</typeparam>
            <param name="writer">The writer.</param>
            <param name="graph">The graph.</param>
            <param name="vertexIdentity">The vertex identity.</param>
            <param name="edgeIdentity">The edge identity.</param>
            <param name="graphElementName">Name of the graph element.</param>
            <param name="vertexElementName">Name of the vertex element.</param>
            <param name="edgeElementName">Name of the edge element.</param>
            <param name="namespaceUri">The namespace URI (optional).</param>
            <param name="writeGraphAttributes">The write graph attributes (optional).</param>
            <param name="writeVertexAttributes">The write vertex attributes (optional).</param>
            <param name="writeEdgeAttributes">The write edge attributes (optional).</param>
        </member>
        <member name="T:QuickGraph.SEdge`1">
            <summary>
            An struct based <see cref="T:QuickGraph.IEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
        </member>
        <member name="M:QuickGraph.SEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.SEdge`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:QuickGraph.SEdge`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:QuickGraph.SEdge`1.Source">
            <summary>
            Gets the source vertex
            </summary>
            <value></value>
        </member>
        <member name="P:QuickGraph.SEdge`1.Target">
            <summary>
            Gets the target vertex
            </summary>
            <value></value>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.EdgeRecorderObserver`2">
            <summary>
            
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="boost"
                />
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.IObserver`1">
            <summary>
            An algorithm observer
            </summary>
            <typeparam name="TAlgorithm">type of the algorithm</typeparam>
            <reference-ref
                id="gof02designpatterns"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.Observers.IObserver`1.Attach(`0)">
            <summary>
            Attaches to the algorithm events
            and returns a disposable object that can be used
            to detach from the events
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2">
            <summary>
            Edmond and Karp maximum flow algorithm
            for directed graph with positive capacities and
            flows.
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
        </member>
        <member name="T:QuickGraph.Algorithms.MaximumFlow.MaximumFlowAlgorithm`2">
            <summary>
            Abstract base class for maximum flow algorithms.
            </summary>
        </member>
        <member name="M:QuickGraph.Algorithms.MaximumFlow.EdmondsKarpMaximumFlowAlgorithm`2.InternalCompute">
            <summary>
            Computes the maximum flow between Source and Sink.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Edge`1">
            <summary>
            The default <see cref="T:QuickGraph.IEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
        </member>
        <member name="M:QuickGraph.Edge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.Edge`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:QuickGraph.Edge`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:QuickGraph.Edge`1.Source">
            <summary>
            Gets the source vertex
            </summary>
            <value></value>
        </member>
        <member name="P:QuickGraph.Edge`1.Target">
            <summary>
            Gets the target vertex
            </summary>
            <value></value>
        </member>
        <member name="T:QuickGraph.AdjacencyGraph`2">
            <summary>
            A directed graph data structure efficient for sparse
            graph representation where out-edge need to be enumerated only.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.IVertexAndEdgeListGraph`2">
            <summary>
            A directed graph where vertices and edges can be enumerated efficiently.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.IEdgeListAndIncidenceGraph`2">
            <summary>
            An incidence graph whose edges can be enumerated
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="P:QuickGraph.AdjacencyGraph`2.IsEdgesEmpty">
            <summary>
            Gets a value indicating whether this instance is edges empty.
            </summary>
            <value>
            	<c>true</c> if this instance is edges empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:QuickGraph.AdjacencyGraph`2.EdgeCount">
            <summary>
            Gets the edge count.
            </summary>
            <value>The edge count.</value>
        </member>
        <member name="P:QuickGraph.AdjacencyGraph`2.Edges">
            <summary>
            Gets the edges.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="T:QuickGraph.IMutableBidirectionalGraph`2">
            <summary>
            A mutable bidirectional directed graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.IBidirectionalGraph`2">
            <summary>
            A directed graph datastructure that is efficient
            to traverse both in and out edges.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
        </member>
        <member name="M:QuickGraph.IBidirectionalGraph`2.IsInEdgesEmpty(`0)">
            <summary>
            Determines whether <paramref name="v"/> has no in-edges.
            </summary>
            <param name="v">The vertex</param>
            <returns>
            	<c>true</c> if <paramref name="v"/> has no in-edges; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QuickGraph.IBidirectionalGraph`2.InDegree(`0)">
            <summary>
            Gets the number of in-edges of <paramref name="v"/>
            </summary>
            <param name="v">The vertex.</param>
            <returns>The number of in-edges pointing towards <paramref name="v"/></returns>
        </member>
        <member name="M:QuickGraph.IBidirectionalGraph`2.InEdges(`0)">
            <summary>
            Gets the collection of in-edges of <paramref name="v"/>.
            </summary>
            <param name="v">The vertex</param>
            <returns>The collection of in-edges of <paramref name="v"/></returns>
        </member>
        <member name="M:QuickGraph.IBidirectionalGraph`2.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the in-edges of <paramref name="v"/>
            </summary>
            <param name="v"></param>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.IBidirectionalGraph`2.InEdge(`0,System.Int32)">
            <summary>
            Gets the in-edge at location <paramref name="index"/>.
            </summary>
            <param name="v">The vertex.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.IBidirectionalGraph`2.Degree(`0)">
            <summary>
            Gets the degree of <paramref name="v"/>, i.e.
            the sum of the out-degree and in-degree of <paramref name="v"/>.
            </summary>
            <param name="v">The vertex</param>
            <returns>The sum of OutDegree and InDegree of <paramref name="v"/></returns>
        </member>
        <member name="M:QuickGraph.IMutableBidirectionalGraph`2.RemoveInEdgeIf(`0,QuickGraph.EdgePredicate{`0,`1})">
            <summary>
            Removes in-edges of <paramref name="v"/> that match
            predicate <paramref name="edgePredicate"/>.
            </summary>
            <param name="v"></param>
            <param name="edgePredicate"></param>
            <returns>Number of edges removed</returns>
        </member>
        <member name="M:QuickGraph.IMutableBidirectionalGraph`2.ClearInEdges(`0)">
            <summary>
            Clears in-edges of <paramref name="v"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:QuickGraph.IMutableBidirectionalGraph`2.ClearEdges(`0)">
            <summary>
            Clears in-edges and out-edges of <paramref name="v"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="T:QuickGraph.Petri.IPlace`1">
            <summary>
            A Place in the HLPN framework
            </summary>
            <remarks>
            <para>
            A <see cref="T:QuickGraph.Petri.Place`1"/> is characterized by a set of tokens, called the
            <see cref="P:QuickGraph.Petri.IPlace`1.Marking"/> of the place.
            </para>
            <para>
            Usually represented by an ellipses (often circles).
            </para>
            </remarks>
        </member>
        <member name="T:QuickGraph.Petri.IPetriVertex">
            <summary>
            A vertex (node) of a Petri Graph.
            </summary>
        </member>
        <member name="P:QuickGraph.Petri.IPetriVertex.Name">
            <summary>
            Gets or sets the name of the node
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the node.
            </value>
        </member>
        <member name="T:QuickGraph.SEquatableEdge`1">
            <summary>
            An struct based <see cref="T:QuickGraph.IEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
        </member>
        <member name="M:QuickGraph.SEquatableEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.SEdge`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:QuickGraph.SEquatableEdge`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:QuickGraph.SEquatableEdge`1.Equals(QuickGraph.SEquatableEdge{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.SEquatableEdge`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.SEquatableEdge`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:QuickGraph.SEquatableEdge`1.Source">
            <summary>
            Gets the source vertex
            </summary>
            <value></value>
        </member>
        <member name="P:QuickGraph.SEquatableEdge`1.Target">
            <summary>
            Gets the target vertex
            </summary>
            <value></value>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2">
            <summary>
            A edge depth first search algorithm for implicit directed graphs
            </summary>
            <remarks>
            This is a variant of the classic DFS where the edges are color
            marked.
            </remarks>
            <reference-ref
                idref="gross98graphtheory"
                chapter="4.2"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.OnStartVertex(`0)">
            <summary>
            Triggers the StartVertex event.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.OnStartEdge(`1)">
            <summary>
            Triggers the StartEdge event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.OnDiscoverTreeEdge(`1,`1)">
            <summary>
            Triggers DiscoverEdge event
            </summary>
            <param name="se"></param>
            <param name="e"></param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.OnTreeEdge(`1)">
            <summary>
            Triggers the TreeEdge event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.OnBackEdge(`1)">
            <summary>
            Triggers the BackEdge event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(`1)">
            <summary>
            Triggers the ForwardOrCrossEdge event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.OnFinishEdge(`1)">
            <summary>
            Triggers the ForwardOrCrossEdge event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.Visit(`1,System.Int32)">
            <summary>
            Does a depth first search on the vertex u
            </summary>
            <param name="se">edge to explore</param>
            <param name="depth">current exploration depth</param>
            <exception cref="T:System.ArgumentNullException">se cannot be null</exception>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.Initialize">
            <summary>
            Initializes the algorithm before computation.
            </summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.EdgeColors">
            <summary>
            Gets the vertex color map
            </summary>
            <value>
            Vertex color (<see cref="T:QuickGraph.GraphColor"/>) dictionary
            </value>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.MaxDepth">
            <summary>
            Gets or sets the maximum exploration depth, from
            the start vertex.
            </summary>
            <remarks>
            Defaulted at <c>int.MaxValue</c>.
            </remarks>
            <value>
            Maximum exploration depth.
            </value>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.StartVertex">
            <summary>
            Invoked on the source vertex once before the start of the search. 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.StartEdge">
            <summary>
            Invoked on the first edge of a test case
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.DiscoverTreeEdge">
            <summary>
            
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Invoked on each edge as it becomes a member of the edges that form 
            the search tree. If you wish to record predecessors, do so at this 
            event point. 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.BackEdge">
            <summary>
            Invoked on the back edges in the graph. 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.ForwardOrCrossEdge">
            <summary>
            Invoked on forward or cross edges in the graph. 
            (In an undirected graph this method is never called.) 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitEdgeDepthFirstSearchAlgorithm`2.FinishEdge">
            <summary>
            Invoked on a edge after all of its out edges have been added to 
            the search tree and all of the adjacent vertices have been 
            discovered (but before their out-edges have been examined). 
            </summary>
        </member>
        <member name="T:QuickGraph.CreateEdgeDelegate`2">
            <summary>
            An edge factory delegate
            </summary>
        </member>
        <member name="T:QuickGraph.GraphExtensions">
            <summary>
            Extension methods for populating graph datastructures
            </summary>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToVertexAndEdgeListGraph``3(System.Collections.Generic.IDictionary{``0,``2})">
            <summary>
            Wraps a dictionary into a vertex and edge list graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToVertexAndEdgeListGraph``3(System.Collections.Generic.IDictionary{``0,``2},System.Converter{System.Collections.Generic.KeyValuePair{``0,``2},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Wraps a dictionary into a vertex and edge list graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="keyValueToOutEdges"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToDelegateIncidenceGraph``2(QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of DelegateIncidenceGraph.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="tryGetOutEdges"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToDelegateVertexAndEdgeListGraph``2(System.Collections.Generic.IEnumerable{``0},QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of DelegateIncidenceGraph.
            </summary>
            <param name="vertices"></param>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="tryGetOutEdges"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToDelegateUndirectedGraph``3(System.Collections.Generic.IDictionary{``0,``2})">
            <summary>
            Wraps a dictionary into an undirected list graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToDelegateUndirectedGraph``3(System.Collections.Generic.IDictionary{``0,``2},System.Converter{System.Collections.Generic.KeyValuePair{``0,``2},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Wraps a dictionary into an undirected graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="keyValueToOutEdges"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToDelegateUndirectedGraph``2(System.Collections.Generic.IEnumerable{``0},QuickGraph.TryFunc{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Creates an instance of DelegateIncidenceGraph.
            </summary>
            <param name="vertices"></param>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="tryGetAdjacentEdges"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToArrayAdjacencyGraph``2(QuickGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Creates an immutable array adjacency graph from the input graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToArrayAdjacencyGraph``2(QuickGraph.IBidirectionalGraph{``0,``1})">
            <summary>
            Creates an immutable array adjacency graph from the input graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToBidirectionalGraph``2(QuickGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Wraps a adjacency graph (out-edge only) into a bidirectional graph.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToUndirectedGraph``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Converts a sequence of edges into an undirected graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToUndirectedGraph``2(System.Collections.Generic.IEnumerable{``1},System.Boolean)">
            <summary>
            Converts a sequence of edges into an undirected graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="edges"></param>
            <param name="allowParralelEdges"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToBidirectionalGraph``2(System.Collections.Generic.IEnumerable{``1},System.Boolean)">
            <summary>
            Converts a set of edges into a bidirectional graph.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="edges">The edges.</param>
            <param name="allowParallelEdges">if set to <c>true</c>, the graph allows parallel edges.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToBidirectionalGraph``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Converts a set of edges into a bidirectional graph.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="edges">The edges.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToAdjacencyGraph``2(System.Collections.Generic.IEnumerable{``1},System.Boolean)">
            <summary>
            Converts a set of edges into an adjacency graph.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="edges">The edges.</param>
            <param name="allowParallelEdges">if set to <c>true</c>, the graph allows parallel edges.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToAdjacencyGraph``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Converts a set of edges into an adjacency graph.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="edges">The edges.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToAdjacencyGraph``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)">
            <summary>
            Converts a set of vertices into an adjacency graph,
            using an edge factory.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="vertices">The vertices.</param>
            <param name="outEdgesFactory">The out edges factory.</param>
            <param name="allowParallelEdges">if set to <c>true</c>, the graph allows parallel edges.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToAdjacencyGraph``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Converts a set of ver.tices into an adjacency graph,
            using an edge factory.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="vertices">The vertices.</param>
            <param name="outEdgesFactory">The out edges factory.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToBidirectionalGraph``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)">
            <summary>
            Converts a set of ver.tices into a bidirectional graph,
            using an edge factory.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="vertices">The vertices.</param>
            <param name="outEdgesFactory">The out edges factory.</param>
            <param name="allowParallelEdges">if set to <c>true</c>, the graph allows parallel edges.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToBidirectionalGraph``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Converts a set of ver.tices into a bidirectional graph,
            using an edge factory
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="vertices">The vertices.</param>
            <param name="outEdgesFactory">The out edges factory.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToAdjacencyGraph``1(System.Collections.Generic.IEnumerable{QuickGraph.SEquatableEdge{``0}})">
            <summary>
            Converts a sequence of vertex pairs into an adjancency graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="vertexPairs"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToBidirectionalGraph``1(System.Collections.Generic.IEnumerable{QuickGraph.SEquatableEdge{``0}})">
            <summary>
            Converts a sequence of vertex pairs into an bidirectional graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="vertexPairs"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToUndirectedGraph``1(System.Collections.Generic.IEnumerable{QuickGraph.SEquatableEdge{``0}})">
            <summary>
            Converts a sequence of vertex pairs into an bidirectional graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="vertexPairs"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.GraphExtensions.ToCompressedRowGraph``2(QuickGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Creates an immutable compressed row graph representation of the visited graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Contracts.GraphContract">
            <summary>
            Debug only assertions and assumptions
            </summary>
        </member>
        <member name="T:QuickGraph.TaggedUndirectedEdge`2">
            <summary>
            A tagged undirected edge.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TTag">Type type of the tag</typeparam>
        </member>
        <member name="T:QuickGraph.UndirectedEdge`1">
            <summary>
            The default <see cref="T:QuickGraph.IUndirectedEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
        </member>
        <member name="M:QuickGraph.UndirectedEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.Edge`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:QuickGraph.UndirectedEdge`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:QuickGraph.UndirectedEdge`1.Source">
            <summary>
            Gets the source vertex
            </summary>
            <value></value>
        </member>
        <member name="P:QuickGraph.UndirectedEdge`1.Target">
            <summary>
            Gets the target vertex
            </summary>
            <value></value>
        </member>
        <member name="M:QuickGraph.TaggedUndirectedEdge`2.#ctor(`0,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.TaggedUndirectedEdge`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="tag">the tag</param>
        </member>
        <member name="M:QuickGraph.TaggedUndirectedEdge`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="E:QuickGraph.TaggedUndirectedEdge`2.TagChanged">
            <summary>
            Raised when the tag is changed
            </summary>
        </member>
        <member name="P:QuickGraph.TaggedUndirectedEdge`2.Tag">
            <summary>
            Gets or sets the tag
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.BinaryHeap`2">
            <summary>
            Binary heap
            </summary>
            <remarks>
            Indexing rules:
            
            parent index: index ¡ 1)/2
            left child: 2 * index + 1
            right child: 2 * index + 2
            
            Reference:
            http://dotnetslackers.com/Community/files/folders/data-structures-and-algorithms/entry28722.aspx
            </remarks>
            <typeparam name="TValue">type of the value</typeparam>
            <typeparam name="TPriority">type of the priority metric</typeparam>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm`2">
            <summary>
            Floyd-Warshall all shortest path algorith,
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.DijkstraShortestPathAlgorithm`2">
            <summary>
            Dijkstra single-source shortest path algorithm for directed graph
            with positive distance.
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="lawler01combinatorial"
                />
        </member>
        <member name="T:QuickGraph.Algorithms.Services.IAlgorithmServices">
            <summary>
            Common services available to algorithm instances
            </summary>
        </member>
        <member name="P:QuickGraph.Predicates.ReversedResidualEdgePredicate`2.ResidualCapacities">
            <summary>
            Residual capacities map
            </summary>
        </member>
        <member name="P:QuickGraph.Predicates.ReversedResidualEdgePredicate`2.ReversedEdges">
            <summary>
            Reversed edges map
            </summary>
        </member>
        <member name="T:QuickGraph.GraphColor">
            <summary>
            Colors used in vertex coloring algorithms
            </summary>
        </member>
        <member name="F:QuickGraph.GraphColor.White">
            <summary>
            Usually initial color,
            </summary>
        </member>
        <member name="F:QuickGraph.GraphColor.Gray">
            <summary>
            Usually intermidiate color,
            </summary>
        </member>
        <member name="F:QuickGraph.GraphColor.Black">
            <summary>
            Usually finished color
            </summary>
        </member>
        <member name="T:QuickGraph.DelegateIncidenceGraph`2">
            <summary>
            A delegate-based incidence graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.DelegateImplicitGraph`2">
            <summary>
            A delegate-based implicit graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.Collections.HeapDirection">
            <summary>
            Specifies the order in which a Heap will Dequeue items.
            </summary>
        </member>
        <member name="F:QuickGraph.Collections.HeapDirection.Increasing">
            <summary>
            Items are Dequeued in Increasing order from least to greatest.
            </summary>
        </member>
        <member name="F:QuickGraph.Collections.HeapDirection.Decreasing">
            <summary>
            Items are Dequeued in Decreasing order, from greatest to least.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.LambdaHelpers.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
            Performs an action on each item in a list, used to shortcut a "foreach" loop
            </summary>
            <typeparam name="T">Type contained in List</typeparam>
            <param name="collection">List to enumerate over</param>
            <param name="action">Lambda Function to be performed on all elements in List</param>
        </member>
        <member name="M:QuickGraph.Collections.LambdaHelpers.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each item in a list, used to shortcut a "foreach" loop
            </summary>
            <typeparam name="T">Type contained in List</typeparam>
            <param name="collection">List to enumerate over</param>
            <param name="action">Lambda Function to be performed on all elements in List</param>
        </member>
        <member name="F:QuickGraph.Collections.FibonacciHeapCell`2.Marked">
            <summary>
            Determines of a Node has had a child cut from it before
            </summary>
        </member>
        <member name="F:QuickGraph.Collections.FibonacciHeapCell`2.Degree">
            <summary>
            Determines the depth of a node
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.FibonacciHeap`2.UpdateNodesDegree(QuickGraph.Collections.FibonacciHeapCell{`0,`1})">
            <summary>
            Updates the degree of a node, cascading to update the degree of the
            parents if nessecary
            </summary>
            <param name="parentNode"></param>
        </member>
        <member name="M:QuickGraph.Collections.FibonacciHeap`2.UpdateNext">
            <summary>
            Updates the Next pointer, maintaining the heap
            by folding duplicate heap degrees into eachother
            Takes O(lg(N)) time amortized
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.FibonacciHeap`2.ReduceNodes(QuickGraph.Collections.FibonacciHeapCell{`0,`1},QuickGraph.Collections.FibonacciHeapCell{`0,`1})">
            <summary>
            Given two nodes, adds the child node as a child of the parent node
            </summary>
            <param name="parentNode"></param>
            <param name="childNode"></param>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.UndirectedBreadthFirstSearchAlgorithm`2">
            <summary>
            A breath first search algorithm for undirected graphs
            </summary>
            <reference-ref
                idref="gross98graphtheory"
                chapter="4.2"
                />
        </member>
        <member name="T:QuickGraph.Serialization.GraphMLSerializer`3">
            <summary>
            A GraphML ( http://graphml.graphdrawing.org/ ) format serializer.
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <typeparam name="TGraph">type of the graph</typeparam>
            <remarks>
            <para>
            Custom vertex, edge and graph attributes can be specified by 
            using the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"/>
            attribute on properties (field not suppored).
            </para>
            <para>
            The serializer uses LCG (lightweight code generation) to generate the 
            methods that writes the attributes to avoid paying the price of 
            Reflection on each vertex/edge. Since nothing is for free, the first
            time you will use the serializer *on a particular pair of types*, it
            will have to bake that method.
            </para>
            <para>
            Hyperedge, nodes, nested graphs not supported.
            </para>
            </remarks>
        </member>
        <member name="T:QuickGraph.ICloneableEdge`2">
            <summary>
            A cloneable edge
            </summary>
            <typeparam name="TVertex">type of the vertex</typeparam>
            <typeparam name="TEdge">type of the edge</typeparam>
        </member>
        <member name="M:QuickGraph.ICloneableEdge`2.Clone(`0,`0)">
            <summary>
            Clones the edge content to a different pair of <paramref name="source"/>
            and <paramref name="target"/> vertices
            </summary>
            <param name="source">The source vertex of the new edge</param>
            <param name="target">The target vertex of the new edge</param>
            <returns>A clone of the edge with new source and target vertices</returns>
        </member>
        <member name="T:QuickGraph.Petri.ITransition`1">
            <summary>
            A node of a net, taken from the transition kind.
            </summary>
            <remarks>
            <para>
            Usually represented by a rectangle.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Petri.ITransition`1.Condition">
            <summary>
            A boolean expression associated with the transition
            </summary>
        </member>
        <member name="M:QuickGraph.IHierarchy`2.GetParent(`0)">
            <summary>
            Gets the parent <typeparamref name="Vertex"/> of <paramref name="vertex"/>
            </summary>
            <param name="vertex"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertex"/> is the root of the graph.
            </exception>
        </member>
        <member name="M:QuickGraph.IHierarchy`2.GetParentEdge(`0)">
            <summary>
            Gets the parent <typeparamref name="Edge"/> of <paramref name="vertex"/>
            </summary>
            <param name="vertex"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertex"/> is the root of the graph.
            </exception>
        </member>
        <member name="M:QuickGraph.IHierarchy`2.IsCrossEdge(`1)">
            <summary>
            Gets a value indicating if <paramref name="edge"/> is 
            a cross edge.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.IHierarchy`2.IsRealEdge(`1)">
            <summary>
            Gets a value indicating whether <paramref name="edge"/> 
            exists really or is just an induced edge.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.IHierarchy`2.IsPredecessorOf(`0,`0)">
            <summary>
            Gets a value indicating if <paramref name="source"/>
            is a predecessor of <paramref name="target"/>
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns>
            true if <paramref name="source"/> is a predecessor of
            <paramref name="target"/>
            </returns>
        </member>
        <member name="M:QuickGraph.IHierarchy`2.InducedEdgeCount(`0,`0)">
            <summary>
            Gets the number of edges between <paramref name="source"/>
            and <paramref name="target"/>. 
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> is a predecessor of <paramref name="target"/>
            or the otherway round.
            </exception>
        </member>
        <member name="M:QuickGraph.IHierarchy`2.IsInnerNode(`0)">
            <summary>
            Gets a value indicating if <paramref name="vertex"/> is 
            inner node or a leaf.
            </summary>
            <param name="vertex"></param>
            <returns>
            true if not a leaf
            </returns>
        </member>
        <member name="M:QuickGraph.IHierarchy`2.ChildrenEdges(`0)">
            <summary>
            Gets the collection of children <typeparamref name="Edge"/>
            from <paramref name="Vertex"/>
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.IHierarchy`2.ChildrenVertices(`0)">
            <summary>
            Gets the collection of children <typeparamref name="Vertex"/>
            from <paramref name="Vertex"/>
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.IHierarchy`2.Root">
            <summary>
            Gets the roots of the hierarchy
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.DummyContract">
            <summary>
            Ensures that System.Diagnostics.Contracts namespace exists 
            </summary>
        </member>
        <member name="T:QuickGraph.Serialization.XmlSerializableGraph`3">
            <summary>
            A base class that creates a proxy to a graph that is xml serializable
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TGraph"></typeparam>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.BidirectionalDepthFirstSearchAlgorithm`2">
            <summary>
            A depth and height first search algorithm for directed graphs
            </summary>
            <remarks>
            This is a modified version of the classic DFS algorithm
            where the search is performed both in depth and height.
            </remarks>
            <reference-ref
                idref="gross98graphtheory"
                chapter="4.2"
                />
        </member>
        <member name="T:QuickGraph.Algorithms.LengauerTarjanDominatorAlgorithm`2">
            <summary>
            Computes the dominator map of a directed graph
            </summary>
            <remarks>
            Thomas Lengauer and Robert Endre Tarjan
            A fast algorithm for finding dominators in a flowgraph
            ACM Transactions on Programming Language and Systems, 1(1):121-141, 1979. 
            </remarks>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.Serialization.GraphMLDeserializer`3">
            <summary>
            A GraphML ( http://graphml.graphdrawing.org/ ) format deserializer.
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <typeparam name="TGraph">type of the graph</typeparam>
            <remarks>
            <para>
            Custom vertex, edge and graph attributes can be specified by 
            using the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"/>
            attribute on properties (field not suppored).
            </para>
            <para>
            The serializer uses LCG (lightweight code generation) to generate the 
            methods that writes the attributes to avoid paying the price of 
            Reflection on each vertex/edge. Since nothing is for free, the first
            time you will use the serializer *on a particular pair of types*, it
            will have to bake that method.
            </para>
            <para>
            Hyperedge, nodes, nested graphs not supported.
            </para>
            </remarks>
        </member>
        <member name="T:QuickGraph.DelegateUndirectedGraph`2">
            <summary>
            A functional implicit undirected graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.CompressedSparseRowGraph`1">
            <summary>
            Directed graph representation using a Compressed Sparse Row representation
            (http://www.cs.utk.edu/~dongarra/etemplates/node373.html)
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.EdgePredecessorRecorderObserver`2">
            <summary>
            
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="boost"
                />
        </member>
        <member name="T:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2">
            <summary>
            A depth first search algorithm for implicit directed graphs
            </summary>
            <reference-ref
                idref="gross98graphtheory"
                chapter="4.2"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.OnStartVertex(`0)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.StartVertex"/> event.
            </summary>
            <param name="v">vertex that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.OnDiscoverVertex(`0)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.DiscoverVertex"/> event.
            </summary>
            <param name="v">vertex that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.OnExamineEdge(`1)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.ExamineEdge"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.OnTreeEdge(`1)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.TreeEdge"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.OnBackEdge(`1)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.BackEdge"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.OnForwardOrCrossEdge(`1)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.ForwardOrCrossEdge"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.OnFinishVertex(`0)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.FinishVertex"/> event.
            </summary>
            <param name="v">vertex that raised the event</param>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.VertexColors">
            <summary>
            Gets the vertex color map
            </summary>
            <value>
            Vertex color (<see cref="T:QuickGraph.GraphColor"/>) dictionary
            </value>
        </member>
        <member name="P:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.MaxDepth">
            <summary>
            Gets or sets the maximum exploration depth, from
            the start vertex.
            </summary>
            <remarks>
            Defaulted at <c>int.MaxValue</c>.
            </remarks>
            <value>
            Maximum exploration depth.
            </value>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.StartVertex">
            <summary>
            Invoked on the source vertex once before the start of the search. 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.DiscoverVertex">
            <summary>
            Invoked when a vertex is encountered for the first time. 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.ExamineEdge">
            <summary>
            Invoked on every out-edge of each vertex after it is discovered. 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.TreeEdge">
            <summary>
            Invoked on each edge as it becomes a member of the edges that form 
            the search tree. If you wish to record predecessors, do so at this 
            event point. 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.BackEdge">
            <summary>
            Invoked on the back edges in the graph. 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.ForwardOrCrossEdge">
            <summary>
            Invoked on forward or cross edges in the graph. 
            (In an undirected graph this method is never called.) 
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Search.ImplicitDepthFirstSearchAlgorithm`2.FinishVertex">
            <summary>
            Invoked on a vertex after all of its out edges have been added to 
            the search tree and all of the adjacent vertices have been 
            discovered (but before their out-edges have been examined). 
            </summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2">
            <summary>
            A depth first search algorithm for directed graph
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="gross98graphtheory"
                chapter="4.2"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.IUndirectedGraph{`0,`1})">
            <summary>
            Initializes a new instance of the algorithm.
            </summary>
            <param name="visitedGraph">visited graph</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.IUndirectedGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuickGraph.GraphColor})">
            <summary>
            Initializes a new instance of the algorithm.
            </summary>
            <param name="visitedGraph">visited graph</param>
            <param name="colors">vertex color map</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IUndirectedGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuickGraph.GraphColor})">
            <summary>
            Initializes a new instance of the algorithm.
            </summary>
            <param name="host">algorithm host</param>
            <param name="visitedGraph">visited graph</param>
            <param name="colors">vertex color map</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.UndirectedDepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IUndirectedGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuickGraph.GraphColor},System.Func{System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Initializes a new instance of the algorithm.
            </summary>
            <param name="host">algorithm host</param>
            <param name="visitedGraph">visited graph</param>
            <param name="colors">vertex color map</param>
            <param name="adjacentEdgeEnumerator">
            Delegate that takes the enumeration of out-edges and reorders
            them. All vertices passed to the method should be enumerated once and only once.
            May be null.
            </param>
        </member>
        <member name="T:QuickGraph.TaggedEquatableEdge`2">
            <summary>
            An equatable, tagged, edge
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="T:QuickGraph.EquatableEdge`1">
            <summary>
            An equatable edge implementation
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="T:QuickGraph.STaggedEquatableEdge`2">
            <summary>
            A tagged edge as value type.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="M:QuickGraph.STaggedEquatableEdge`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:QuickGraph.STaggedEquatableEdge`2.Equals(QuickGraph.STaggedEquatableEdge{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.STaggedEquatableEdge`2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.STaggedEquatableEdge`2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:QuickGraph.ArrayUndirectedGraph`2">
            <summary>
            An immutable undirected graph data structure efficient for large sparse
            graph. NOT FINISHED
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:QuickGraph.ArrayUndirectedGraph`2.#ctor(System.Int32,`1[],QuickGraph.VertexIndexer{`0})">
            <summary>
            Initializes a new instance of the array adjacency graph.
            </summary>
            <param name="vertexCount">The number of vertices</param>
            <param name="edges">Array containing the edges. This array is stored and modified as is in the graph. No copy is made.</param>
            <param name="vertexIndices">A mapping from vertices to [0, vertexCount) range</param>
        </member>
        <member name="P:QuickGraph.ArrayUndirectedGraph`2.Indexer">
            <summary>
            Gets the delegate used to map vertices to array indexes
            </summary>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.VertexTimeStamperObserver`2">
            <summary>
            
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="boost"
                />
        </member>
        <member name="T:QuickGraph.Algorithms.TarjanOfflineLeastCommonAncestorAlgorithm`2">
            <summary>
            Offline least common ancestor in a rooted tre
            </summary>
            <remarks>
            Reference:
            Gabow, H. N. and Tarjan, R. E. 1983. A linear-time algorithm for a special case 
            of disjoint set union. In Proceedings of the Fifteenth Annual ACM Symposium 
            on theory of Computing STOC '83. ACM, New York, NY, 246-251. 
            DOI= http://doi.acm.org/10.1145/800061.808753 
            </remarks>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.DagShortestPathAlgorithm`2">
            <summary>
            A single-source shortest path algorithm for directed acyclic
            graph.
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                id="boost"
                />
        </member>
        <member name="T:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2">
            <summary>
            Bellman Ford shortest path algorithm.
            </summary>
            <remarks>
            <para>
            The Bellman-Ford algorithm solves the single-source shortest paths 
            problem for a graph with both positive and negative edge weights. 
            </para>
            <para>
            If you only need to solve the shortest paths problem for positive 
            edge weights, Dijkstra's algorithm provides a more efficient 
            alternative. 
            </para>
            <para>
            If all the edge weights are all equal to one then breadth-first search 
            provides an even more efficient alternative. 
            </para>
            </remarks>
            <reference-ref
                idref="shi03datastructures"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.OnInitializeVertex(`0)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.InitializeVertex"/> event.
            </summary>
            <param name="v">vertex that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.OnExamineEdge(`1)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.ExamineEdge"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.OnEdgeNotRelaxed(`1)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.EdgeNotRelaxed"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.OnEdgeMinimized(`1)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.EdgeMinimized"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.OnEdgeNotMinimized(`1)">
            <summary>
            Raises the <see cref="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.EdgeNotMinimized"/> event.
            </summary>
            <param name="e">edge that raised the event</param>
        </member>
        <member name="M:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.InternalCompute">
            <summary>
            Applies the Bellman Ford algorithm
            </summary>
            <remarks>
            Does not initialize the predecessor and distance map.
            </remarks>
            <returns>true if successful, false if there was a negative cycle.</returns>
        </member>
        <member name="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.InitializeVertex">
            <summary>
            Invoked on each vertex in the graph before the start of the 
            algorithm.
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.ExamineEdge">
            <summary>
            Invoked on every edge in the graph |V| times.
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.EdgeNotRelaxed">
            <summary>
             Invoked if the distance label for the target vertex is not 
             decreased.
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.EdgeMinimized">
            <summary>
             Invoked during the second stage of the algorithm, 
             during the test of whether each edge was minimized. 
             
             If the edge is minimized then this function is invoked.
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.EdgeNotMinimized">
            <summary>
            Invoked during the second stage of the algorithm, 
            during the test of whether each edge was minimized. 
            
            If the edge was not minimized, this function is invoked. 
            This happens when there is a negative cycle in the graph. 
            </summary>
        </member>
        <member name="P:QuickGraph.Algorithms.ShortestPath.BellmanFordShortestPathAlgorithm`2.Predecessors">
            <summary>
            Constructed predecessor map
            </summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.ICancelManager.Cancel">
            <summary>
            Requests the component to cancel its computation
            </summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.ICancelManager.ResetCancel">
            <summary>
            Resets the cancel state
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Services.ICancelManager.CancelRequested">
            <summary>
            Raised when the cancel method is called
            </summary>
        </member>
        <member name="P:QuickGraph.Algorithms.Services.ICancelManager.IsCancelling">
            <summary>
            Gets a value indicating if a cancellation request is pending.
            </summary>
            <returns></returns>
        </member>
        <member name="E:QuickGraph.Algorithms.Services.ICancelManager.CancelReseted">
            <summary>
            Raised when the cancel state has been reseted
            </summary>
        </member>
        <member name="M:QuickGraph.Algorithms.Services.CancelManager.ResetCancel">
            <summary>
            Resets the cancel state
            </summary>
        </member>
        <member name="E:QuickGraph.Algorithms.Services.CancelManager.CancelReseted">
            <summary>
            Raised when the cancel state has been reseted
            </summary>
        </member>
        <member name="T:QuickGraph.EdgeFactory`2">
            <summary>
            An edge factory
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.ForestDisjointSet`1">
            <summary>
            Disjoint-set implementation with path compression and union-by-rank optimizations.
            optimization
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QuickGraph.Collections.ForestDisjointSet`1.MakeSet(`0)">
            <summary>
            Adds a new set
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:QuickGraph.Collections.ForestDisjointSet`1.Find(QuickGraph.Collections.ForestDisjointSet{`0}.Element)">
            <summary>
            Finds the parent element, and applies path compression
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.ArrayAdjacencyGraph`2">
            <summary>
            An immutable directed graph data structure efficient for large sparse
            graph representation where out-edge need to be enumerated only.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:QuickGraph.ArrayAdjacencyGraph`2.Clone">
            <summary>
            Returns self since this class is immutable
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.VertexPredecessorRecorderObserver`2">
            <summary>
            
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="boost"
                />
        </member>
        <member name="T:QuickGraph.IdentifiableEdgeFactory`2">
            <summary>
            A factory of identifiable edges.
            </summary>
        </member>
        <member name="T:QuickGraph.STaggedEdge`2">
            <summary>
            A tagged edge as value type.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="M:QuickGraph.STaggedEdge`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:QuickGraph.ArrayBidirectionalGraph`2">
            <summary>
            An immutable directed graph data structure efficient for large sparse
            graph representation where out-edge need to be enumerated only.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:QuickGraph.ArrayBidirectionalGraph`2.#ctor(QuickGraph.IBidirectionalGraph{`0,`1})">
            <summary>
            Constructs a new ArrayBidirectionalGraph instance from a 
            IBidirectionalGraph instance
            </summary>
            <param name="visitedGraph"></param>
        </member>
        <member name="M:QuickGraph.ArrayBidirectionalGraph`2.Clone">
            <summary>
            Returns self since this class is immutable
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2">
            <summary>
            A depth first search algorithm for directed graph
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="gross98graphtheory"
                chapter="4.2"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuickGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the algorithm.
            </summary>
            <param name="visitedGraph">visited graph</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuickGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuickGraph.GraphColor})">
            <summary>
            Initializes a new instance of the algorithm.
            </summary>
            <param name="visitedGraph">visited graph</param>
            <param name="colors">vertex color map</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IVertexListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the algorithm.
            </summary>
            <param name="host">algorithm host</param>
            <param name="visitedGraph">visited graph</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuickGraph.GraphColor})">
            <summary>
            Initializes a new instance of the algorithm.
            </summary>
            <param name="host">algorithm host</param>
            <param name="visitedGraph">visited graph</param>
            <param name="colors">vertex color map</param>
        </member>
        <member name="M:QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IVertexListGraph{`0,`1},System.Collections.Generic.IDictionary{`0,QuickGraph.GraphColor},System.Func{System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Initializes a new instance of the algorithm.
            </summary>
            <param name="host">algorithm host</param>
            <param name="visitedGraph">visited graph</param>
            <param name="colors">vertex color map</param>
            <param name="outEdgeEnumerator">
            Delegate that takes the enumeration of out-edges and reorders
            them. All vertices passed to the method should be enumerated once and only once.
            May be null.
            </param>
        </member>
        <member name="M:QuickGraph.Algorithms.EulerianTrailAlgorithm`2.#ctor(QuickGraph.Algorithms.Services.IAlgorithmComponent,QuickGraph.IMutableVertexAndEdgeListGraph{`0,`1})">
            <summary>
            Construct an eulerian trail builder
            </summary>
            <param name="host"></param>
            <param name="visitedGraph"></param>
        </member>
        <member name="M:QuickGraph.Algorithms.EulerianTrailAlgorithm`2.Visit">
            <summary>
            Looks for a new path to add to the current vertex.
            </summary>
            <returns>true if found a new path, false otherwize</returns>
        </member>
        <member name="M:QuickGraph.Algorithms.EulerianTrailAlgorithm`2.ComputeEulerianPathCount(QuickGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>
            Computes the number of eulerian trail in the graph.
            </summary>
            <param name="g"></param>
            <returns>number of eulerian trails</returns>
        </member>
        <member name="M:QuickGraph.Algorithms.EulerianTrailAlgorithm`2.CircuitAugmentation">
            <summary>
            Merges the temporary circuit with the current circuit
            </summary>
            <returns>true if all the graph edges are in the circuit</returns>
        </member>
        <member name="M:QuickGraph.Algorithms.EulerianTrailAlgorithm`2.AddTemporaryEdges(QuickGraph.EdgeFactory{`0,`1})">
            <summary>
            Adds temporary edges to the graph to make all vertex even.
            </summary>
            <param name="edgeFactory"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.EulerianTrailAlgorithm`2.RemoveTemporaryEdges">
            <summary>
            Removes temporary edges
            </summary>
        </member>
        <member name="M:QuickGraph.Algorithms.EulerianTrailAlgorithm`2.Trails">
            <summary>
            Computes the set of eulerian trails that traverse the edge set.
            </summary>
            <remarks>
            This method returns a set of disjoint eulerian trails. This set
            of trails spans the entire set of edges.
            </remarks>
            <returns>Eulerian trail set</returns>
        </member>
        <member name="M:QuickGraph.Algorithms.EulerianTrailAlgorithm`2.Trails(`0)">
            <summary>
            Computes a set of eulerian trail, starting at <paramref name="s"/>
            that spans the entire graph.
            </summary>
            <remarks>
            <para>
            This method computes a set of eulerian trail starting at <paramref name="s"/>
            that spans the entire graph.The algorithm outline is as follows:
            </para>
            <para>
            The algorithms iterates throught the Eulerian circuit of the augmented
            graph (the augmented graph is the graph with additional edges to make
            the number of odd vertices even).
            </para>
            <para>
            If the current edge is not temporary, it is added to the current trail.
            </para>
            <para>
            If the current edge is temporary, the current trail is finished and
            added to the trail collection. The shortest path between the 
            start vertex <paramref name="s"/> and the target vertex of the
            temporary edge is then used to start the new trail. This shortest
            path is computed using the BreadthFirstSearchAlgorithm.
            </para>
            </remarks>
            <param name="s">start vertex</param>
            <returns>eulerian trail set, all starting at s</returns>
            <exception cref="T:System.ArgumentNullException">s is a null reference.</exception>
            <exception cref="T:System.Exception">Eulerian trail not computed yet.</exception>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.UndirectedVertexPredecessorRecorderObserver`2">
            <summary>
            
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="boost"
                />
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.GetIndexer``3(System.Collections.Generic.Dictionary{``1,``2})">
            <summary>
            Returns the method that implement the access indexer.
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.GetIndexer``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Returns the method that implement the access indexer.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.GetVertexIdentity``1(QuickGraph.IVertexSet{``0})">
            <summary>
            Gets the vertex identity.
            </summary>
            <remarks>
            Returns more efficient methods for primitive types,
            otherwise builds a dictionary
            </remarks>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <param name="graph">The graph.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.GetEdgeIdentity``2(QuickGraph.IEdgeSet{``0,``1})">
            <summary>
            Gets the edge identity.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="graph">The graph.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.TreeDepthFirstSearch``2(QuickGraph.IVertexListGraph{``0,``1},``0)">
            <summary>
            Computes a depth first tree.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="visitedGraph">The visited graph.</param>
            <param name="root">The root.</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.RankedShortestPathHoffmanPavley``2(QuickGraph.IBidirectionalGraph{``0,``1},System.Func{``1,System.Double},``0,``0,System.Int32)">
            <summary>
            Computes the k-shortest path from <paramref name="source"/>
            <paramref name="target"/> using Hoffman-Pavley algorithm.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <param name="edgeWeights"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="pathCount"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.Sinks``2(QuickGraph.IVertexListGraph{``0,``1})">
            <summary>
            Gets the list of sink vertices
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.Roots``2(QuickGraph.IBidirectionalGraph{``0,``1})">
            <summary>
            Gets the list of root vertices
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.IsolatedVertices``2(QuickGraph.IBidirectionalGraph{``0,``1})">
            <summary>
            Gets the list of isolated vertices (no incoming or outcoming vertices)
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.Roots``2(QuickGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Gets the list of root  vertices
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.Roots``2(QuickGraph.IVertexListGraph{``0,``1})">
            <summary>
            Gets the list of roots
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.TopologicalSort``2(QuickGraph.IUndirectedGraph{``0,``1})">
            <summary>
            Creates a topological sort of a undirected
            acyclic graph.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <returns></returns>
            <exception cref="T:QuickGraph.NonAcyclicGraphException">the input graph
            has a cycle</exception>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.TopologicalSort``2(QuickGraph.IUndirectedGraph{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            Creates a topological sort of a undirected
            acyclic graph.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <param name="vertices"></param>
            <returns></returns>
            <exception cref="T:QuickGraph.NonAcyclicGraphException">the input graph
            has a cycle</exception>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.TopologicalSort``2(QuickGraph.IVertexListGraph{``0,``1})">
            <summary>
            Creates a topological sort of a directed
            acyclic graph.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <returns></returns>
            <exception cref="T:QuickGraph.NonAcyclicGraphException">the input graph
            has a cycle</exception>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.TopologicalSort``2(QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            Creates a topological sort of a directed
            acyclic graph.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <param name="vertices"></param>
            <returns></returns>
            <exception cref="T:QuickGraph.NonAcyclicGraphException">the input graph
            has a cycle</exception>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.ConnectedComponents``2(QuickGraph.IUndirectedGraph{``0,``1},System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>
            Computes the connected components of a graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="g"></param>
            <param name="components"></param>
            <returns>number of components</returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.IncrementalConnectedComponents``2(QuickGraph.IMutableVertexAndEdgeSet{``0,``1})">
            <summary>
            Computes the incremental connected components for a growing graph (edge added only).
            Each call to the delegate re-computes the component dictionary. The returned dictionary
            is shared accross multiple calls of the method.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.WeaklyConnectedComponents``2(QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>
            Computes the weakly connected components of a graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="g"></param>
            <param name="components"></param>
            <returns>number of components</returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.StronglyConnectedComponents``2(QuickGraph.IVertexListGraph{``0,``1},System.Collections.Generic.IDictionary{``0,System.Int32}@)">
            <summary>
            Computes the strongly connected components of a graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="g"></param>
            <param name="components"></param>
            <returns>number of components</returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.Clone``2(QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``0,``0},System.Func{``1,``0,``0,``1},QuickGraph.IMutableVertexAndEdgeSet{``0,``1})">
            <summary>
            Clones a graph to another graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="g"></param>
            <param name="vertexCloner"></param>
            <param name="edgeCloner"></param>
            <param name="clone"></param>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.CondensateStronglyConnected``3(QuickGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Condensates the strongly connected components of a directed graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TGraph"></typeparam>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.CondensateWeaklyConnected``3(QuickGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Condensates the weakly connected components of a graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <typeparam name="TGraph"></typeparam>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.OddVertices``2(QuickGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Create a collection of odd vertices
            </summary>
            <param name="g">graph to visit</param>
            <returns>colleciton of odd vertices</returns>
            <exception cref="T:System.ArgumentNullException">g is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.IsDirectedAcyclicGraph``2(QuickGraph.IVertexListGraph{``0,``1})">
            <summary>
            Gets a value indicating whether the graph is acyclic
            </summary>
            <remarks>
            Performs a depth first search to look for cycles.
            </remarks>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.ComputePredecessorCost``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``1,System.Double},``0)">
            <summary>
            Given a edge cost map, computes 
            the predecessor cost.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="predecessors"></param>
            <param name="edgeCosts"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.MinimumSpanningTreePrim``2(QuickGraph.IUndirectedGraph{``0,``1},System.Func{``1,System.Double})">
            <summary>
            Computes the minimum spanning tree using Prim's algorithm.
            Prim's algorithm is simply implemented by calling Dijkstra shortest path.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.MinimumSpanningTreeKruskal``2(QuickGraph.IUndirectedGraph{``0,``1},System.Func{``1,System.Double})">
            <summary>
            Computes the minimum spanning tree using Kruskal's algorithm.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.OfflineLeastCommonAncestorTarjan``2(QuickGraph.IVertexListGraph{``0,``1},``0,System.Collections.Generic.IEnumerable{QuickGraph.SEquatableEdge{``0}})">
            <summary>
            Computes the offline least common ancestor between pairs of vertices in a rooted tree
            using Tarjan algorithm.
            </summary>
            <remarks>
            Reference:
            Gabow, H. N. and Tarjan, R. E. 1983. A linear-time algorithm for a special case of disjoint set union. In Proceedings of the Fifteenth Annual ACM Symposium on theory of Computing STOC '83. ACM, New York, NY, 246-251. DOI= http://doi.acm.org/10.1145/800061.808753 
            </remarks>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="visitedGraph"></param>
            <param name="root"></param>
            <param name="pairs"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Algorithms.AlgorithmExtensions.MaximumFlowEdmondsKarp``2(QuickGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,System.Double},``0,``0,QuickGraph.TryFunc{``0,``1}@)">
            <summary>
            Computes the Edmonds-Karp maximums flow 
            for a graph with positive capacities and
            flows.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TEdge">The type of the edge.</typeparam>
            <param name="visitedGraph">The visited graph.</param>
            <param name="edgeCapacities">The edge capacities.</param>
            <param name="source">The source.</param>
            <param name="sink">The sink.</param>
            <param name="flowPredecessors">The flow predecessors.</param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.VertexDistanceRecorderObserver`2">
            <summary>
            A distance recorder for directed tree builder algorithms
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
        </member>
        <member name="T:QuickGraph.EdgeEdgeAction`2">
            <summary>
            The handler for events involving two edges
            </summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.IncrementalConnectedComponentsAlgorithm`2.GetComponents">
            <summary>
            Gets a copy of the connected components. Key is the number of components,
            Value contains the vertex -> component index map.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Algorithms.ComputationState">
            <summary>
            The computation state of a graph algorithm
            </summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ComputationState.NotRunning">
            <summary>
            The algorithm is not running
            </summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ComputationState.Running">
            <summary>
            The algorithm is running
            </summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ComputationState.PendingAbortion">
            <summary>
            An abort has been requested. The algorithm is still running and will cancel as soon as it checks
            the cancelation state
            </summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ComputationState.Finished">
            <summary>
            The computation is finished succesfully.
            </summary>
        </member>
        <member name="F:QuickGraph.Algorithms.ComputationState.Aborted">
            <summary>
            The computation was aborted
            </summary>
        </member>
        <member name="M:QuickGraph.Algorithms.ConnectedComponents.StronglyConnectedComponentsAlgorithm`2.FinishVertex(`0)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:QuickGraph.Serialization.GraphMLXmlResolver">
            <summary>
            A resolver that loads graphml DTD and XSD schemas 
            from embedded resources.
            </summary>
        </member>
        <member name="T:QuickGraph.Petri.IArc`1">
            <summary>
            A directed edge of a net which may connect a <see cref="T:QuickGraph.Petri.IPlace`1"/>
            to a <see cref="T:QuickGraph.Petri.ITransition`1"/> or a <see cref="T:QuickGraph.Petri.ITransition`1"/> to
            a <see cref="T:QuickGraph.Petri.IPlace`1"/>.
            </summary>
            <remarks>
            <para>
            Usually represented by an arrow.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Petri.IArc`1.IsInputArc">
            <summary>
            Gets a value indicating if the <see cref="T:QuickGraph.Petri.IArc`1"/>
            instance is a <strong>input arc.</strong>
            </summary>
            <remarks>
            <para>
            An arc that leads from an input <see cref="T:QuickGraph.Petri.IPlace`1"/> to a
            <see cref="T:QuickGraph.Petri.ITransition`1"/> is called an <em>Input Arc</em> of
            the transition.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Petri.IArc`1.Place">
            <summary>
            Gets the <see cref="T:QuickGraph.Petri.IPlace`1"/> instance attached to the
            <see cref="T:QuickGraph.Petri.IArc`1"/>.
            </summary>
            <value>
            The <see cref="T:QuickGraph.Petri.IPlace`1"/> attached to the <see cref="T:QuickGraph.Petri.IArc`1"/>.
            </value>
        </member>
        <member name="P:QuickGraph.Petri.IArc`1.Transition">
            <summary>
            Gets or sets the <see cref="T:QuickGraph.Petri.ITransition`1"/> instance attached to the
            <see cref="T:QuickGraph.Petri.IArc`1"/>.
            </summary>
            <value>
            The <see cref="T:QuickGraph.Petri.ITransition`1"/> attached to the <see cref="T:QuickGraph.Petri.IArc`1"/>.
            </value>
        </member>
        <member name="P:QuickGraph.Petri.IArc`1.Annotation">
            <summary>
            Gets or sets the arc annotation.
            </summary>
            <value>
            The <see cref="T:QuickGraph.Petri.IExpression`1"/> annotation instance.
            </value>
            <remarks>
            <para>
            An expression that may involve constans, variables and operators
            used to annotate the arc. The expression evaluates over the type
            of the arc's associated place.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            set property, value is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.IsSelfEdge``2(``1)">
            <summary>
            Gets a value indicating if the edge is a self edge.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.GetOtherVertex``2(``1,``0)">
            <summary>
            Given a source vertex, returns the other vertex in the edge
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="edge">must not be a self-edge</param>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.IsAdjacent``2(``1,``0)">
            <summary>
            Gets a value indicating if <paramref name="vertex"/> is adjacent to <paramref name="edge"/>
            (is the source or target).
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="edge"></param>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.ToVertexPair``2(``1)">
            <summary>
            Creates a vertex pair (source, target) from the edge
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.IsPredecessor``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)">
            <summary>
            Checks that <paramref name="root"/> is a predecessor of <paramref name="vertex"/>
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="predecessors"></param>
            <param name="root"></param>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.TryGetPath``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Collections.Generic.IEnumerable{``1}@)">
            <summary>
            Tries to get the predecessor path, if reachable.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="predecessors"></param>
            <param name="v"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.GetUndirectedVertexEquality``2">
            <summary>
            Returns the most efficient comporer for the particular type of TEdge.
            If TEdge implements IUndirectedEdge, then only the (source,target) pair
            has to be compared; if not, (source, target) and (target, source) have to be compared.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.UndirectedVertexEquality``2(``1,``0,``0)">
            <summary>
            Gets a value indicating if the vertices of edge match (source, target) or
            (target, source)
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="edge"></param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.SortedVertexEquality``2(``1,``0,``0)">
            <summary>
            Gets a value indicating if the vertices of edge match (source, target)
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="edge"></param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.EdgeExtensions.ReverseEdges``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns a reversed edge enumeration
            </summary>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.BidirectionAdapterGraph`2">
            <summary>
            Wraps a vertex list graph (out-edges only) and caches the in-edge dictionary.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.Algorithms.RankedShortestPath.HoffmanPavleyRankedShortestPathAlgorithm`2">
            <summary>
            Hoffman and Pavley K-shortest path algorithm.
            </summary>
            <remarks>
            Reference:
            Hoffman, W. and Pavley, R. 1959. A Method for the Solution of the Nth Best Path Problem. 
            J. ACM 6, 4 (Oct. 1959), 506-514. DOI= http://doi.acm.org/10.1145/320998.321004
            </remarks>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.DelegateVertexAndEdgeListGraph`2">
            <summary>
            A delegate-based incidence graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.Predicates.IsolatedVertexPredicate`2">
            <summary>
            A vertex predicate that detects vertex with no in or out edges.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:QuickGraph.SUndirectedEdge`1">
            <summary>
            An struct based <see cref="T:QuickGraph.IUndirectedEdge`1"/> implementation.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
        </member>
        <member name="M:QuickGraph.SUndirectedEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.SUndirectedEdge`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:QuickGraph.SUndirectedEdge`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:QuickGraph.SUndirectedEdge`1.Source">
            <summary>
            Gets the source vertex
            </summary>
            <value></value>
        </member>
        <member name="P:QuickGraph.SUndirectedEdge`1.Target">
            <summary>
            Gets the target vertex
            </summary>
            <value></value>
        </member>
        <member name="T:QuickGraph.Algorithms.Search.BreadthFirstSearchAlgorithm`2">
            <summary>
            A breath first search algorithm for directed graphs
            </summary>
            <reference-ref
                idref="gross98graphtheory"
                chapter="4.2"
                />
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.VertexPredecessorPathRecorderObserver`2">
            <summary>
            
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="boost"
                />
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.UndirectedVertexDistanceRecorderObserver`2">
            <summary>
            A distance recorder for undirected tree builder algorithms
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
        </member>
        <member name="T:QuickGraph.NonStronglyConnectedGraphException">
            <summary>
            Exception raised when an algorithm detects a non-strongly connected graph.
            </summary>
        </member>
        <member name="T:QuickGraph.IdentifiableVertexFactory`1">
            <summary>
            A factory of identifiable vertices.
            </summary>
        </member>
        <member name="T:QuickGraph.CreateVertexDelegate`2">
            <summary>
            A vertex factory delegate.
            </summary>
        </member>
        <member name="M:QuickGraph.HashCodeHelper.Combine(System.Int32,System.Int32)">
            <summary>
            Combines two hashcodes in a strong way.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.HashCodeHelper.Combine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines three hashcodes in a strong way.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Algorithms.Observers.VertexRecorderObserver`2">
            <summary>
            
            </summary>
            <typeparam name="TVertex">type of a vertex</typeparam>
            <typeparam name="TEdge">type of an edge</typeparam>
            <reference-ref
                idref="boost"
                />
        </member>
    </members>
</doc>
