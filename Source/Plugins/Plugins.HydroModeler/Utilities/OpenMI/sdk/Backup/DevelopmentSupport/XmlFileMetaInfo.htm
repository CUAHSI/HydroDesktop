<html>
	<head>
		<title>New Page 1</title>
		<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
		<meta name="ProgId" content="FrontPage.Editor.Document">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	</head>
	<body>
		<P dir="ltr" style="MARGIN-RIGHT: 0px"><span lang="EN-GB"><EM>Oatc.OpenMI.Sdk.DevelopmentSupport<BR>
				</EM>
			</span><SPAN lang="EN-GB"><STRONG>MetaInfo used by XmlFile<BR>
				</STRONG>
			</SPAN><SPAN lang="EN-GB">
				<HR width="100%" SIZE="1">
			</SPAN>
		<P></P>
		<P><span lang="EN-GB">This list explains how MetaInfo is used by XmlFile</span></P>
		<p><span lang="EN-GB"><strong>tag:</strong> ObjectAggregate<br>
<strong>queried for:</strong> each class type encountered during reading and 
writing <br>
<strong>expected type:</strong> string<br>
<strong>default value:</strong> DefaultAggregate<br>
<strong>meaning: </strong>Specifies the class type of an aggregate. 
For each object identified by an xml element an aggregate is instantiated. The&nbsp;aggregate serves as an "in 
between" object between the object and XmlFile. NOTE: XmlFile expects that 
the aggregate has a constructor with one argument, the underlying object.</span></p>
		<p class="MsoBodyText"><span lang="EN-GB"><strong>tag:</strong> XmlFile<br>
<b>queried for:</b> each class type encountered during writing<br>
<b>expected type: </b>bool<br>
<b>default value:</b> false<br>
<b>meaning:</b> Indicates whether an object of the specified type should be 
written as a separate XML file. An XML file and file name can be generated if 
not known to the XmlFile object. A relative path to this XML file is written in 
the parent XML file. On reading, if a reference is encountered to such an XML 
file, this referred file is read immediately.</span></p>
		<span lang="EN-GB">
			<P class="MsoBodyText"><SPAN lang="EN-GB"><STRONG>tag:</STRONG> 
XmlSchema<BR><STRONG>queried for:</STRONG>&nbsp;the class type encountered at 
the top of an xml file&nbsp;during reading<BR><STRONG>expected type:</STRONG> 
string<BR><STRONG>default value:</STRONG> null<BR><STRONG>meaning:</STRONG> The 
name of the xsd file against which xml validation is performed. When this value 
is null, no xml validation is performed.</SPAN></P>
			<SPAN lang="EN-GB">
				<P class="MsoBodyText"><SPAN lang="EN-GB"><STRONG>tag:</STRONG> 
XmlNameSpace<BR><STRONG>queried for:</STRONG> the class type encountered at the 
top of an xml file&nbsp;during&nbsp;writing<BR><STRONG>expected type:</STRONG> 
string<BR><STRONG>default value:</STRONG> null<BR><STRONG>meaning:</STRONG> The 
xml namespace. When validation is performed against a schema (xsd file), the xml 
file&nbsp;must have an xml namespace. For correct validation the xml namespace 
must be the same as the one specified in the xsd file.</SPAN></P>
				<SPAN lang="EN-GB">
					<P class="MsoBodyText"><SPAN lang="EN-GB"><STRONG>tag:</STRONG> 
XsdPackage<BR><STRONG>queried for:</STRONG> the class type encountered at the 
top of an xml file&nbsp;during reading<BR><STRONG>expected type:</STRONG> 
string<BR><STRONG>default value:</STRONG> null<BR><STRONG>meaning:</STRONG> 
Indicates the assembly which contains the xsd file (denoted with 
XmlSchema).</SPAN></P>
				</SPAN>
			</SPAN>
			<P class="MsoBodyText"><STRONG>tag:</STRONG>XmlSkipElement<br>
				<b>queried for:</b> each property in an object during writing<br>
				<b>expected type: </b>bool<br>
				<b>default value:</b> false<br>
				<b>meaning:</b> Indicates whether a property should be skipped when written to 
				XML. Also assemblies can be skipped. In that case one must make sure that the 
				assembly has been loaded in another way when reading the xml file.</P>
			<p class="MsoBodyText">
		</span><strong>tag: </strong>XmlKey<br>
		<strong>queried for:</strong> each property in an object during writing<br>
		<b>expected type: </b>bool<br>
		<b>default value:</b> false<br>
		<b>meaning:</b> Indicates whether a property should be written to XML if the 
		corresponding object has been written to the XML file before. This occurs when 
		the data structure isn't hierarchical. Only the first time it is encountered on 
		writing, it is written out completely. Next times only a reference is written 
		to the first occurrence. The key of the object is used as reference.<br>
		<span lang="EN-GB">The key of the entire object is the combination of all 
properties denoted as XML key. This key should be unique per class type per XML 
file.<b></b></span></P>
		<span lang="EN-GB">
			<p class="MsoBodyText"><strong>tag: </strong>XmlAllowGeneration<br>
				<strong>queried for:</strong> each property in an object during writing, which 
				is denoted as an xml key.<br>
				<strong>expected type:</strong> bool<br>
				<strong>default value:</strong> true<br>
				<strong>meaning:</strong> Indicates whether generation of a key value is 
				allowed if the property value is empty (i.e. null or a string of length zero or 
				a string only containing spaces). If generation is to be carried out, a unique 
				number is assigned to the property value. The property type is expected to be 
				an integer or a string.
			</p>
			<p class="MsoBodyText"><strong>tag: </strong>XmlName<br>
				<strong>queried for:</strong> each property in an object during writing and 
				reading<br>
				<b>expected type: </b>string<br>
				<b>default value:</b> the property name as defined in the class<br>
				<b>meaning:</b> Provides the name for the XML element or XML attribute in the 
				XML file for a property.<b> </b>
			</p>
			<p class="MsoBodyText"><strong>tag: </strong>XmlRefName<br>
				<strong>queried for:</strong> each property in an object during writing and 
				reading, if the object is or will be written as a reference to a prior object 
				in the XML file.<br>
				<b>expected type: </b>string<br>
				<b>default value:</b> the XML name<br>
				<b>meaning:</b> Provides the name for the XML element or XML attribute in the 
				XML file for a property.</p>
			<p class="MsoBodyText"><strong>tag: </strong>XmlItemName<br>
				<strong>queried for:</strong> each member of a collection during writing<br>
				<b>expected type: </b>string<br>
				<b>default value:</b> the single name derived from the XML name of the 
				collection object, e.g. the single name of the collection name "nodes", "node 
				list", "node set" or "node collection" will be "node".<br>
				<b>meaning:</b> Provides the name for the xml element in the xml file for a 
				collection member.</p>
			<p class="MsoBodyText"><strong>tag: </strong>XmlRefItemName<br>
				<strong>queried for:</strong> each member of a collection during writing, if 
				the member will be written as a reference to a prior object in the XML file.<br>
				<b>expected type: </b>string<br>
				<b>default value:</b> the single name derived from the XML name of the 
				collection.<br>
				<b>meaning:</b> Provides the name for the XML element in the XML file for a 
				collection member.<b> </b>
			</p>
			<p class="MsoBodyText"><strong>tag: </strong>XmlItemType<br>
				<strong>queried for:</strong> each collection property in an object during 
				reading and writing<br>
				<strong>expected type:</strong> string<br>
				<strong>default value:</strong> null<br>
				<strong>meaning:</strong> Defines the class type of&nbsp; collection members. 
				If set, class type information can be omitted during writing.
			</p>
			<P><strong>tag: </strong>XmlTypeAlias<br>
				<strong>queried for:</strong> each type definition encountered in the XML file 
				during reading<br>
				<b>expected type: </b>string<br>
				<b>default value:</b> the same type definition.<br>
				<b>meaning:</b> Defines the class name (including namespaces) to be 
				instantiated for a type definition in the XML file. This is useful if a class 
				has been renamed and XML files still contain the old class name.</P>
			<P><STRONG>tag:</STRONG> XmlTypeName<BR>
				<STRONG>queried for:</STRONG> each type definition encountered in the XML file 
				during writing<BR>
				<STRONG>expected type:</STRONG> string<BR>
				<STRONG>default value:</STRONG> the same type definition.<BR>
				<STRONG>meaning:</STRONG> Defines the way the class name is written in xml for 
				the type attribute. This is useful if a&nbsp;readable class name is desired in 
				the xml file. When setting a value for XmlTypeName, a corresponding value for 
				XmlTypeAlias is needed.</P>
			<P class="MsoBodyText"><STRONG>tag:</STRONG>XmlParent<br>
				<strong>queried for:</strong> each property in an object during writing<br>
				<b>expected type: </b>object<br>
				<b>default value:</b> null<br>
				<b>meaning:</b> Defines the property of an object, which functions as its 
				parent, i.e. the xml parent element in the xml file. For example, the 
				IElementSet has “Parent” for this value. When the aggregate of the element set 
				is asked for the property “Parent”, it searches for the linkable component 
				which owns the element set.<br>
				If the value is null, XmlFile assumes that the object which has this object as 
				a property is the parent.</P>
			<p class="MsoBodyText"><strong>tag:</strong> XmlIndex<br>
				<strong>queried for:</strong> each property in an object during writing<br>
				<b>expected type: </b>integer<br>
				<b>default value:</b> 1000<br>
				<b>meaning:</b> Defines a sorting number of the XML element. During write, XML 
				child elements are sorted according to this sorting number, if equal 
				alphabetically.</p>
		</span>
	</body>
</html>
