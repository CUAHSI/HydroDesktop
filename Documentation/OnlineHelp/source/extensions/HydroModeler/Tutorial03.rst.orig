.. index:: Tutorial03

Tutorial 3: Creating a New Model Component
==========================================
   
The purpose of this tutorial is to show how to create a new component from scratch. In this demonstration, using Visual Studio C#.  

C# is an object oriented programming language designed for building a wide variety of applications that run on the .NET Framework.  The .NET Framework is a Windows component that supports building and running of applications and Web services.  The key components of the .NET Framework are the common language runtime and the class library.  The class library is a collection of classes, interfaces, and value types that are included in the Microsoft .NET Framework.  The class library is designed to be the foundation on which the .NET Framework applications, components, and controls are built. 


Hargreaves Component Structure
------------------------------

Getting stared with Visual C#
------------------------------

1. If you do not have access to Microsoft Visual Studio you can download Microsoft Visual C# 2010 for free from http://www.microsoft.com/express/Downloads/

2. Choose the tab Visual Studio 2010 Express.  Then select Visual C# 2010 Express Edition.  Click Download and follow instructions to install.

.. figure:: ./images/Tutorial03/HM_fig44.png
   :align: center

3. If you are learning C# or need a refresher there are many tutorials available on-line that can help.  The address below will take you to Microsoft's Development Network were they have a beginners learning center.  There are several links available here for learning Visual Studio C# and Visual Studio Basic: http://msdn.microsoft.com/en-us/beginner/bb308734.aspx

.. index:: 
   single: Sample Component
   
Sample Component
----------------

The sample component is a shell of how code should be written to run in HydroDesktop.  This component can be used as a guide to create and run more meaningful hydrological applications.    

1. Download the latest version of HydroDesktop http://hydrodesktop.codeplex.com/SourceControl/list/changesets.

.. figure:: ./images/Tutorial03/Download.png
   :align: center
.

2. The sample component is available on the HydroDesktop website (http://hydrodesktop.codeplex.com/SourceControl/changeset/view/320c9bb87767#) and in the downloaded version.

.. figure:: ./images/Tutorial03/Sample.png
   :align: center
.

.. index:: 
   single: Create Hargreaves component using Microsoft Visual C#

Create Hargreaves component using Microsoft Visual C#.
---------------------------------------------- 

1. Open the start menu and from program choose Microsoft Visual studio, then Microsoft Visual studio.

.. figure:: ./images/Tutorial03/open.png
   :align: center
.

2.Open the Visual studio C# and create a new project. choose Visual C#, Class Library, named as Hargreaves, Browse the location tab path and point to this path C:/Hydrodesktop_May11/Source/Plugins/HydroModeler/Components.

.. figure:: ./images/Tutorial03/class.png
   :align: center
.

3. Add two folders (source-data), copy class1.cs into source folder and rename it Hargreaves.cs 

.. figure:: ./images/Tutorial03/folders.png
   :align: center


Adding References
'''''''''''

A reference is a file that is required to run the code you have written.  Usually a reference identifies a dll (Dynamic Linking Library) file.  The references can be viewed by expanding the Reference option listed in the Solution Explorer window located on the upper right side of the page.  

1. Right click on Reference and select Add Reference.

.. figure:: ./images/Tutorial03/ref.png
   :align: center
.

2. A window will pop up. Using the tabs, browse to C:/Hydrodesktop/Binaries/Plugins/HydroModeler, and add (Oatc.OpenMI.Sdk.Backbone.dll-Oatc.OpenMI.Sdk.Buffer.dll-Oatc.OpenMI.Sdk.DevelopmentSupport.dll-Oatc.OpenMI.Sdk.Wrapper.dll-OpenMI.Standard.dll)

3. Navigate to C:/Hydrodesktop/Binaries/Plugins/HydroModeler/example_configuration/bin and add SMW.dll.

.. figure:: ./images/Tutorial03/referencesstructure.png
   :align: center
.

.. index:: 
   single: Namespaces
   

Namespaces
'''''''''''

Namespaces allow you a way to organize your code.  The "using" directive can be implemented as a way of accessing members of a namespace without having to type out their full name each time they are used.  When a new project is created several common namespaces are inserted. 

1. Implement the using directive to add the namespaces of the references we add.

.. figure:: ./images/Tutorial03/system.png
   :align: center

.. index:: 
   single: Create the Linkable component


Create the Linkable component
''''''''''''''''''''''''''''
1.Add a new class under the source folder and rename it as **LinkableComponent** (camel back typing). 

.. figure:: ./images/Tutorial03/linkablecomponent.png
   :align: center
.

2.Inherit the linkable engine class from Oatc.OpenMI.Sdk.Wrapper namespace.

.. figure:: ./images/Tutorial03/inherited.png
   :align: center
.

.. index:: 
   single: Create the Configuration Xml

Create the Configuration Xml
''''''''''''''''''''''''''''

Configuration file define the exchange items (output-input) of the component, and the time horizon of the component ( start-end-step) time. 

1. Add a xml file to the Data folder.

2. Copy the configuration structure from the sample component into your config.xml.

.. figure:: ./images/Tutorial03/config.png
   :align: center
.

3. Hargreaves component have three input exchange items, one output exchange item.

4. In output exchange item we define the Element set(ID-Description-path for output shape file if necessary), and Quantity (ID-Dimensions-units-value type).

.. figure:: ./images/Tutorial03/outputexchangeitem.png
   :align: center
.

5. In input exchange item we define Element set(ID-Description-path for input shape file if necessary), and Quantity (ID-Dimensions-units-value type). Repeat for the rest of the exchange items

.. figure:: ./images/Tutorial03/inputexchangeitem.png
   :align: center
.

.. index:: 
   single: Create the omi file


Create the omi file
''''''''''''''''''
 **omi** is used to define (Linkable component- *relative* location for component dll-path for cofiguration.xml- input & output arguments)

1. Create a xml file, add it under data folder and name it as Hargreaves.

2. Change the file extension to omi.

3. Define the relative path for the Hargeaves.dll.

4. Define an argument (Key-ReadOnly-Value) for the configuration file. key is a string used to search in the properties of the omi, ReadOnly is a boolen and is set to be true, and the value point to the *relative* location of the configuration.xml.

5. Add an argument named Output to define the relative location of the output csv file.

.. figure:: ./images/Tutorial03/omi.png
   :align: center
.
 

.. index:: 
   single: Methods

Methods
''''''''

There are several major parts to this code:

1. Defining the global variables- In this section variables are defined using specific data types such as string, integer, double, and Boolean.


.. figure:: ./images/Tutorial03/variable.png
   :align: center
.


2. The Finish method- This section of code tells the application to write output files based on data acquired during the simulation.


.. figure:: ./images/Tutorial03/finish.png
   :align: center
.


3. The Initialize method- Gives the application instructions on operations that need to be preformed prior to running the simulation.  This section locates the configuration file and sets internal variables in OpenMI.


.. figure:: ./images/Tutorial03/start.png
   :align: center
.


4. The Calculations Section- For the Sample Component the calculation section is written so that the application simply generates random numbers. 

  
.. figure:: ./images/Tutorial03/preform.png
   :align: center
.

Within the Finish method there is code telling the application where to write the output file.  This line should be changed now to specify where you would like the output file.  If you choose not to change the code then by default the output text file created by HydroModeler will go up two directories from where you run HydroDesktop.  

.. index:: 
   single: Compiling

Compiling
''''''''''

The next steps involve compiling the application.  Compiling is the process of converting written code into an executable file that the computer can run.  
In Visual Studio C# select Build - Build Solution

1. right click on the Hargreaves.csproj,  selsect properties, Debug, start external program, and navigate to HydroDesktop.exe in C:/Hydrodesktop/Binaries/HydroDesktop.exe

.. figure:: ./images/Tutorial03/compile.png
   :align: center
.

2. Build the solution to check for any errors and alert you to them in the Error List window at the bottom of the screen.
    

.. index:: 
   single: Running a sample component in HydrDesktop


HydroDesktop
'''''''''''''

1. Start HydroDesktop

2. Click the icon in the upper left corner of the screen.  Then select Extensions - HydroModeler.

.. figure:: ./images/Tutorial03/HM_fig50.png
   :align: center
.

3. Using the drop down tab next to Current Directory, change the directory to the location of your Hargreaves Component files.

4. Once you have the directory pointing to the Sample Component a list of folders will appear to the left side of the screen.

.. figure:: ./images/Tutorial03/HM_fig51.png
   :align: center
.

5. To add the Sample Component Model double click on the data folder then on the sample (type = model).

.. figure:: ./images/Tutorial03/ModelAdding.png
   :align: center
.

6. Add the model and trigger

.. figure:: ./images/Tutorial03/trigger.png
   :align: center




